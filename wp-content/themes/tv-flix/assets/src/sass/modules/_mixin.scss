// ==========================================================================
//  GLOBAL Mixins
// ==========================================================================



 // * Convert font-size from px to rem
 // *
 // * @param $size - the value in pixel you want to convert
 // *
 // * e.g. p {@include fontSize(12px);}
 // * 


@mixin font-rem($font-size, $line-height: 0, $percent: 0) {
  font-size: ( ($font-size - (($percent / 100) * $font-size) ) / $baseFontSize) * 1rem;
  @if ($line-height > 0) {
    line-height: ( ($line-height - (($percent / 100) * $line-height) ) / $baseFontSize) * 1rem;
  }
}


// Letter spacing- tracking
@mixin letter-spacing($letter-tracking){
  letter-spacing: ($letter-tracking/1000 * 1em);
}

@function space-by-per($value: 0, $percent: 0) {
  @return ceil($value - ( ($percent / 100) * $value ));
}



 // * SASS color map function
 // *
 // * using the function to get an non-map color
 // *
 // * e.g. body {background-color: color(background)};
 // * 
 // * using the function to get a nested map color
 // *
 // * h1{color: color(primary, base);}
 // *
 
// retrieve color from $colors map ie. `color(base, primary)`

@function color($color-name, $color-variant:null) {
  // color variant is optional
  @if ($color-variant != null) {
    // map inception
    @return map-get(map-get($colors, $color-name), $color-variant);
  } @else {
    @return map-get($colors, $color-name);
  }
}



// Media query mixin
@mixin bp($query) {
  @if $query == desktop-xl {
    @media (min-width: 1671px) { @content; }
  }
  @else if $query == desktop-x {
    @media (max-width: 1670px) { @content; }
  }
  @else if $query == desktop-lg {
    @media (min-width: 1600px) { @content; }
  }
  @else if $query == desktop-md {
    @media (min-width: 1200px) { @content; }
  }
  @else if $query == desktop-sm {
    @media (max-width: 1200px) { @content; }
  }
  @else if $query == desktop-md-extra {
    @media (min-width: 1250px) { @content; }
  }
  @else if $query == desktop-custom {
     @media (min-width: 1024px) and (max-width: 1200px) { @content; }
  }
  @else if $query == ipad-pro-strict {
    @media (min-width: 1024px) and (max-width: 1366px)  { @content; }
  }
    @else if $query == standard-desktop {
     @media (min-width: 992px) and (max-width: 1200px) { @content; }
  }
  @else if $query == tablet-md {
    @media (min-width: 1025px) { @content; }
  }
  @else if $query == tablet-sm {
    @media (max-width: 1024px) { @content; }
  }
  @else if $query == tablet-strict {
    @media (min-width: 768px) and (max-width: 991px)  { @content; }
  }
  @else if $query == tablet-only {
    @media (min-width: 768px) and (max-width: 768px)  { @content; }
  }
  @else if $query == tablet {
    @media (min-width: 768px) { @content; }
  }
  @else if $query == tablet-down {
    @media (max-width: 768px) { @content; }
  }
  @else if $query == mobile {
    @media (max-width: 767px)  { @content; }
  }
  @else if $query == responsive { // this is only for header. please do not use anywhere else
    @media (max-width: 1024px)  { @content; }
  }
  @else if $query == desktop-head { // this is only for header. please do not use anywhere else
    @media (min-width: 1025px)  { @content; }
  }
  @else if $query == mid-head { // this is only for header. please do not use anywhere else
    @media (min-width: 1025px) and (max-width: 1199px)  { @content; }
  }
  @else if $query == xs {
    @media (max-width: 575px)  { @content; }
  }
  @else if $query == tablet-between {
    @media (min-width: 992px) and (max-width: 1199px)  { @content; }
  } 
}



// Input placeholder mixin

@mixin input-placeholder {
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
}

// input,  
// textarea {  
//     @include input-placeholder {
//         color: $grey;
//     }
// }


// IE Mixins

@mixin ie-11 {
  @media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
    @content;
  }
}

@mixin ie-edge {
  @supports (-ms-ime-align: auto) {
    @content;
  }
}

@mixin moz {
  @-moz-document url-prefix() {
    @content;
  }
}


// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}


// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash infront.
// Useful for making responsive utilities.
//
//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    ""  (Returns a blank string)
//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    "-sm"
@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}


// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
	  $min: breakpoint-min($name, $breakpoints);
	  @if $min {
	    @media (min-width: $min) {
	      @content;
	    }
	  } @else {
	    @content;
	}
}

$bg-repeat: no-repeat;
$bg-size: contain;
$bg-x: center;
$bg-y: center;
@mixin bg($image, $repeat: $bg-repeat, $size: $bg-size, $x: $bg-x, $y: $bg-y) {
  background: {
    image: url($image);
    repeat: $repeat;
    size: $size;
    position: $x $y;
  }
}

@mixin shake($x, $y, $rot, $name, $steps:10, $opacity:false) {
  $r:0deg;
  $h:0px;
  $v:0px; 
  
  $interval: $steps;
  $step: 0%;

  @keyframes #{$name}{ 
    @while $step < 100% {
      @if ($rot != 0deg){ $r : random($rot) - $rot/2;} 
        @else { $r : 0deg; }
      @if ($x != 0px){ $h : random($x) - $x/2; } 
        @else { $h : 0px; }
      @if ($y != 0px){ $v : random($y) - $y/2; } 
        @else { $v : 0px; }
    
      @if($step == 0%){
        #{$step} {
          transform: translate(0px, 0px) rotate(0deg);
          @if($opacity){
            opacity: random(10)*.1;
          }
        }  
      } @else {
        #{$step} {
          transform: translate($h, $v) rotate($r);
          @if($opacity){
            opacity: random(10)*.1; 
          }
        }
      }
      $step: $step + $interval;
    }

  }
}

$duration:5s;
$base-name:shake-base;
$iteration:infinite;
$timing:ease-in-out;
$delay:2s;

// The animation
@mixin animation($name, $dur: $duration, $iter: $iteration, $tim: $timing, $del: $delay){
  animation-name: $name;
  animation-duration: $dur;
  animation-iteration-count: $iter;
  animation-timing-function: $tim;
  animation-delay: $del;
}

@function background_url( $image ) {
  @return url( $base_uri + $image );
}
